蜜罐系统管理平台技术开发文档
1. 项目概述
1.1 项目背景
本项目是基于蜜罐系统的安全管理平台，用于收集、分析和展示蜜罐系统产生的安全事件数据，支持威胁狩猎、告警处理、资产监控和威胁情报管理等功能。平台需支持单机部署和蜜罐主机部署两种模式，通过容器化技术实现快速部署与版本管理。
1.2 项目目标
开发一套功能完善的蜜罐系统管理平台，实现对蜜罐设备产生的安全事件进行全面监控、分析和响应，提供直观的可视化展示和高效的安全运营工具。
1.3 范围界定
仅处理蜜罐系统（包括 "模拟服务" 和真实虚拟机系统）产生的数据
不包含其他真实主机数据的接入与处理
功能范围以 demo_01 为基础并进行增强，不得缩减原有功能
2. 技术架构
2.1 整体架构
客户端层 <--> API网关层 <--> 应用服务层 <--> 数据存储层

客户端层：Web 前端应用，基于 Vue 3 + TypeScript 构建
API 网关层：处理请求路由、认证授权、限流等
应用服务层：基于 FastAPI 的后端服务，实现业务逻辑
数据存储层：PostgreSQL 主数据库 + Manticore 日志数据库
2.2 技术栈详情
2.2.1 前端技术栈
框架：Vue 3 + Vite
编程语言：TypeScript
UI 组件库：Element Plus
基础解决方案：vue-element-plus-admin
状态管理：Pinia
数据可视化：Apache ECharts
路由管理：Vue Router
HTTP 客户端：Axios
2.2.2 后端技术栈
框架：Python + FastAPI
数据库 ORM：SQLAlchemy
认证授权：JWT
任务队列：Celery（用于异步任务处理）
日志处理：Python logging 模块
2.2.3 数据存储
主数据库：PostgreSQL 14+
日志数据库：Manticore
缓存：Redis（可选，用于提高性能）
2.2.4 部署环境
容器化：Docker + Docker Compose
操作系统：Linux（推荐 Ubuntu 20.04 + 或 CentOS 8+）
3. 功能模块设计
3.1 模块划分
安全态势模块（含传统大屏视图切换功能）
告警中心模块
调查与响应模块
资产管理模块
威胁狩猎模块
威胁情报模块
报告中心模块
系统管理模块
3.2 核心模块详细设计
3.2.1 安全态势模块
功能描述：展示全局安全状态，包括关键安全指标、告警趋势、威胁分布等
关键功能点：
安全指标统计：今日新增告警、未处理告警、受影响资产等
趋势分析：近 7 天告警趋势、威胁类型分布
资产状态概览：正常资产、需关注资产、受威胁资产比例
大屏视图切换：提供地图展示、事件直观统计等传统大屏功能
3.2.2 告警中心模块
功能描述：集中展示和处理系统产生的安全告警
关键功能点：
告警列表展示：支持分页、筛选、排序
告警详情查看：包含事件描述、相关资产、威胁等级等
告警处理：标记状态（未处理、处理中、已解决）、添加处理记录
告警规则配置：设置告警阈值、级别等
3.2.3 调查与响应模块
功能描述：对安全事件进行深入调查和响应处置
关键功能点：
调查会话管理：创建、保存、加载调查会话
事件时间线：按时间顺序展示相关事件
实体关系图：展示事件相关实体（IP、资产、文件等）之间的关系
响应行动：提供隔离资产、隔离文件等安全操作
3.2.4 资产管理模块
功能描述：管理蜜罐系统相关资产信息
关键功能点：
资产列表：展示所有蜜罐资产基本信息
资产详情：包括配置信息、漏洞情况、合规状态等
漏洞管理：高危 / 中危漏洞统计、漏洞详情、补丁状态
合规性管理：合规率统计、不合规项检查与处理
3.2.5 威胁狩猎模块
功能描述：主动搜索和发现潜在威胁
关键功能点：
狩猎查询：支持高级查询和可视化查询构建
狩猎任务管理：创建、执行、保存狩猎任务
狩猎结果分析：展示发现的威胁数量和确认率
狩猎趋势：展示狩猎活动的趋势图表
3.2.6 威胁情报模块
功能描述：管理和应用威胁情报数据
关键功能点：
情报概览：总 IOC 数量、活跃威胁指标、威胁家族统计
威胁分析：威胁类型分布、严重程度分布、来源地域分布
IOC 管理：查询、导入、导出 IOC 数据
情报源配置：管理内部和外部情报源
3.2.7 报告中心模块
功能描述：生成和管理各类安全报表
关键功能点：
报表模板：提供告警趋势、事件处理 SLA、资产健康度等模板
报表生成：支持自定义时间范围、包含内容等
报表预览与导出：支持 PDF 等格式导出
报表订阅：设置定期生成和发送报表
3.2.8 系统管理模块
功能描述：平台系统配置和管理
关键功能点：
用户管理：用户创建、权限分配
系统配置：基础参数设置
日志管理：系统操作日志查询
版本管理：系统更新检查和升级
情报源配置：设置内部和外部情报源
4. 数据库设计
4.1 数据库选型
主数据库：PostgreSQL - 用于存储业务数据、配置信息等
日志数据库：Manticore - 用于存储蜜罐产生的日志数据
4.2 核心数据表设计
4.2.1 用户与权限相关表
-- 用户表
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    full_name VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 角色表
CREATE TABLE roles (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 权限表
CREATE TABLE permissions (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) UNIQUE NOT NULL,
    description TEXT
);

-- 用户角色关联表
CREATE TABLE user_roles (
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    role_id INTEGER REFERENCES roles(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, role_id)
);

-- 角色权限关联表
CREATE TABLE role_permissions (
    role_id INTEGER REFERENCES roles(id) ON DELETE CASCADE,
    permission_id INTEGER REFERENCES permissions(id) ON DELETE CASCADE,
    PRIMARY KEY (role_id, permission_id)
);

4.2.2 资产相关表
-- 资产表
CREATE TABLE assets (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    asset_type VARCHAR(50) NOT NULL, -- 服务器、工作站、网络设备等
    ip_address VARCHAR(50) NOT NULL,
    mac_address VARCHAR(50),
    os_version VARCHAR(100),
    status VARCHAR(20) DEFAULT 'normal', -- normal, warning, danger
    is_honeypot BOOLEAN DEFAULT TRUE, -- 是否为蜜罐设备
    is_virtual BOOLEAN DEFAULT TRUE, -- 是否为虚拟机
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 漏洞表
CREATE TABLE vulnerabilities (
    id SERIAL PRIMARY KEY,
    cve_id VARCHAR(50) UNIQUE,
    description TEXT,
    cvss_score NUMERIC(3,1),
    severity VARCHAR(20), -- low, medium, high, critical
    discovered_at TIMESTAMP,
    patched BOOLEAN DEFAULT FALSE
);

-- 资产漏洞关联表
CREATE TABLE asset_vulnerabilities (
    asset_id INTEGER REFERENCES assets(id) ON DELETE CASCADE,
    vulnerability_id INTEGER REFERENCES vulnerabilities(id) ON DELETE CASCADE,
    first_found TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(20) DEFAULT 'open', -- open, fixed
    PRIMARY KEY (asset_id, vulnerability_id)
);

-- 合规检查项表
CREATE TABLE compliance_checks (
    id SERIAL PRIMARY KEY,
    policy_name VARCHAR(100) NOT NULL,
    check_item VARCHAR(200) NOT NULL,
    severity VARCHAR(20) DEFAULT 'medium',
    description TEXT
);

-- 资产合规检查结果表
CREATE TABLE asset_compliance_results (
    id SERIAL PRIMARY KEY,
    asset_id INTEGER REFERENCES assets(id) ON DELETE CASCADE,
    check_id INTEGER REFERENCES compliance_checks(id) ON DELETE CASCADE,
    result BOOLEAN, -- TRUE:合规, FALSE:不合规
    checked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

4.2.3 事件与告警相关表
-- 事件表
CREATE TABLE events (
    id SERIAL PRIMARY KEY,
    event_type VARCHAR(50) NOT NULL,
    asset_id INTEGER REFERENCES assets(id),
    source_ip VARCHAR(50),
    destination_ip VARCHAR(50),
    source_port INTEGER,
    destination_port INTEGER,
    protocol VARCHAR(20),
    description TEXT,
    event_time TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    raw_data JSONB -- 存储原始事件数据
);

-- 告警表
CREATE TABLE alerts (
    id SERIAL PRIMARY KEY,
    event_id INTEGER REFERENCES events(id),
    alert_name VARCHAR(100) NOT NULL,
    severity VARCHAR(20) NOT NULL, -- low, medium, high, critical
    status VARCHAR(20) DEFAULT 'unhandled', -- unhandled, handling, resolved
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    handled_by INTEGER REFERENCES users(id),
    handle_notes TEXT,
    handled_at TIMESTAMP
);

-- 告警规则表
CREATE TABLE alert_rules (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    condition JSONB NOT NULL, -- 存储告警触发条件
    severity VARCHAR(20) NOT NULL,
    enabled BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

4.2.4 威胁情报相关表
-- IOC表
CREATE TABLE iocs (
    id SERIAL PRIMARY KEY,
    ioc_type VARCHAR(50) NOT NULL, -- ip, domain, hash, url等
    value VARCHAR(255) NOT NULL UNIQUE,
    threat_type VARCHAR(100),
    severity VARCHAR(20) DEFAULT 'medium',
    source VARCHAR(100),
    confidence INTEGER CHECK (confidence >= 0 AND confidence <= 100),
    first_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE
);

-- 威胁家族表
CREATE TABLE threat_families (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) UNIQUE NOT NULL,
    description TEXT,
    associated_iocs INTEGER[] -- 关联的IOC ID数组
);

-- 情报源表
CREATE TABLE intelligence_sources (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    source_type VARCHAR(50), -- internal, commercial, open_source
    url VARCHAR(255),
    api_key VARCHAR(255),
    enabled BOOLEAN DEFAULT TRUE,
    last_sync TIMESTAMP,
    sync_interval INTEGER -- 同步间隔(分钟)
);

4.2.5 调查与狩猎相关表
-- 调查会话表
CREATE TABLE investigation_sessions (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    created_by INTEGER REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(20) DEFAULT 'active' -- active, completed, archived
);

-- 狩猎任务表
CREATE TABLE hunting_tasks (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    query_string TEXT NOT NULL,
    query_type VARCHAR(20) DEFAULT 'advanced', -- advanced, visual
    created_by INTEGER REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(20) DEFAULT 'pending', -- pending, running, completed, failed
    result_count INTEGER DEFAULT 0,
    completed_at TIMESTAMP
);

5. API 接口设计
5.1 接口规范
基础路径：/api/v1
数据格式：JSON
认证方式：Bearer Token (JWT)
状态码使用：
200: 成功
201: 创建成功
400: 请求参数错误
401: 未认证
403: 权限不足
404: 资源不存在
500: 服务器内部错误
5.2 核心 API 定义
5.2.1 认证相关接口
POST /auth/login
- 描述: 用户登录
- 请求体: {username: string, password: string}
- 响应: {token: string, user: UserInfo}

POST /auth/logout
- 描述: 用户登出
- 请求头: Authorization: Bearer {token}
- 响应: {success: boolean}

GET /auth/me
- 描述: 获取当前用户信息
- 请求头: Authorization: Bearer {token}
- 响应: {id: number, username: string, fullName: string, roles: Role[]}

5.2.2 安全态势接口
GET /dashboard/metrics
- 描述: 获取安全态势关键指标
- 请求头: Authorization: Bearer {token}
- 响应: {
    todayAlerts: number,
    unhandledAlerts: number,
    affectedAssets: number,
    activeHuntingTasks: number,
    handledEvents: number
  }

GET /dashboard/alert-trend
- 描述: 获取告警趋势数据
- 请求头: Authorization: Bearer {token}
- 参数: days: number (默认7)
- 响应: {
    dates: string[],
    counts: number[]
  }

GET /dashboard/threat-distribution
- 描述: 获取威胁类型分布
- 请求头: Authorization: Bearer {token}
- 响应: {
    types: string[],
    counts: number[]
  }

GET /dashboard/asset-status
- 描述: 获取资产状态分布
- 请求头: Authorization: Bearer {token}
- 响应: {
    normal: number,
    warning: number,
    danger: number,
    normalPercent: number,
    warningPercent: number,
    dangerPercent: number
  }

GET /dashboard/big-screen
- 描述: 获取大屏视图数据
- 请求头: Authorization: Bearer {token}
- 响应: {
    // 大屏所需的综合数据
  }

5.2.3 告警中心接口
GET /alerts
- 描述: 获取告警列表
- 请求头: Authorization: Bearer {token}
- 参数: 
  - page: number
  - size: number
  - severity: string (可选)
  - status: string (可选)
  - startTime: string (可选)
  - endTime: string (可选)
- 响应: {
    total: number,
    items: Alert[]
  }

GET /alerts/{id}
- 描述: 获取告警详情
- 请求头: Authorization: Bearer {token}
- 响应: AlertDetail

PUT /alerts/{id}/status
- 描述: 更新告警状态
- 请求头: Authorization: Bearer {token}
- 请求体: {status: string, notes?: string}
- 响应: {success: boolean, alert: Alert}

GET /alert-rules
- 描述: 获取告警规则列表
- 请求头: Authorization: Bearer {token}
- 响应: AlertRule[]

POST /alert-rules
- 描述: 创建告警规则
- 请求头: Authorization: Bearer {token}
- 请求体: AlertRuleCreate
- 响应: AlertRule

5.2.4 调查与响应接口
GET /investigations
- 描述: 获取调查会话列表
- 请求头: Authorization: Bearer {token}
- 响应: InvestigationSession[]

POST /investigations
- 描述: 创建调查会话
- 请求头: Authorization: Bearer {token}
- 请求体: {name: string, description?: string}
- 响应: InvestigationSession

GET /investigations/{id}/timeline
- 描述: 获取调查会话时间线
- 请求头: Authorization: Bearer {token}
- 响应: EventTimeline[]

GET /investigations/{id}/entities
- 描述: 获取调查会话实体关系
- 请求头: Authorization: Bearer {token}
- 响应: EntityRelationship

POST /responses/isolate-asset
- 描述: 隔离资产
- 请求头: Authorization: Bearer {token}
- 请求体: {assetId: number}
- 响应: {success: boolean, message: string}

POST /responses/quarantine-file
- 描述: 隔离文件
- 请求头: Authorization: Bearer {token}
- 请求体: {assetId: number, filePath: string}
- 响应: {success: boolean, message: string}

5.2.5 其他模块接口
其他模块（资产管理、威胁狩猎、威胁情报、报告中心、系统管理）的 API 设计遵循类似模式，此处省略详细定义，实际开发中需补充完整。
6. 前端详细设计
6.1 项目结构
src/
├── api/                # API请求封装
├── assets/             # 静态资源
├── components/         # 通用组件
│   ├── common/         # 基础组件
│   ├── charts/         # 图表组件
│   └── business/       # 业务组件
├── composables/        # 组合式API
├── hooks/              # 钩子函数
├── layouts/            # 布局组件
├── router/             # 路由配置
├── store/              # Pinia状态管理
├── styles/             # 样式文件
├── types/              # TypeScript类型定义
├── utils/              # 工具函数
├── views/              # 页面视图
│   ├── dashboard/      # 安全态势
│   ├── alert-center/   # 告警中心
│   ├── investigation/  # 调查与响应
│   ├── assets/         # 资产管理
│   ├── threat-hunting/ # 威胁狩猎
│   ├── intelligence/   # 威胁情报
│   ├── reports/        # 报告中心
│   └── system/         # 系统管理
├── App.vue             # 根组件
└── main.ts             # 入口文件

6.2 状态管理设计
使用 Pinia 进行状态管理，按模块划分 store：
// store/modules/user.ts 示例
import { defineStore } from 'pinia'

export const useUserStore = defineStore('user', {
  state: () => ({
    userInfo: null,
    token: localStorage.getItem('token') || '',
    permissions: []
  }),
  getters: {
    isAuthenticated: (state) => !!state.token,
    hasPermission: (state) => (permission: string) => 
      state.permissions.includes(permission)
  },
  actions: {
    setToken(token: string) {
      this.token = token
      localStorage.setItem('token', token)
    },
    setUserInfo(info: any) {
      this.userInfo = info
      this.permissions = info.permissions || []
    },
    logout() {
      this.token = ''
      this.userInfo = null
      this.permissions = []
      localStorage.removeItem('token')
    }
  }
})

6.3 路由设计
// router/index.ts 示例
import { createRouter, createWebHistory } from 'vue-router'
import Layout from '@/layouts/index.vue'

const routes = [
  {
    path: '/login',
    name: 'Login',
    component: () => import('@/views/login/index.vue'),
    meta: { requiresAuth: false }
  },
  {
    path: '/',
    component: Layout,
    meta: { requiresAuth: true },
    children: [
      {
        path: '',
        name: 'Dashboard',
        component: () => import('@/views/dashboard/index.vue')
      },
      {
        path: 'dashboard/big-screen',
        name: 'BigScreen',
        component: () => import('@/views/dashboard/big-screen.vue')
      },
      {
        path: 'alerts',
        name: 'AlertCenter',
        component: () => import('@/views/alert-center/index.vue')
      },
      // 其他路由...
    ]
  }
]

const router = createRouter({
  history: createWebHistory(),
  routes
})

// 路由守卫
router.beforeEach((to, from, next) => {
  const token = localStorage.getItem('token')
  if (to.meta.requiresAuth && !token) {
    next('/login')
  } else {
    next()
  }
})

export default router

6.4 数据可视化组件设计
基于 Apache ECharts 封装通用图表组件：
<!-- components/charts/SelfBaseChart.vue -->
<template>
  <div ref="chartRef" class="chart-container" :style="{ width, height }"></div>
</template>

<script setup lang="ts">
import { ref, onMounted, watch, nextTick } from 'vue'
import * as echarts from 'echarts'
import type { EChartsOption } from 'echarts'

const props = defineProps({
  width: {
    type: String,
    default: '100%'
  },
  height: {
    type: String,
    default: '300px'
  },
  options: {
    type: Object as () => EChartsOption,
    required: true
  },
  autoResize: {
    type: Boolean,
    default: true
  }
})

const chartRef = ref<HTMLDivElement>(null)
let chart: echarts.ECharts | null = null

const initChart = () => {
  if (chartRef.value) {
    chart = echarts.init(chartRef.value)
    chart.setOption(props.options)
  }
}

const resizeChart = () => {
  chart?.resize()
}

onMounted(() => {
  initChart()
  if (props.autoResize) {
    window.addEventListener('resize', resizeChart)
  }
})

watch(
  () => props.options,
  (newOptions) => {
    nextTick(() => {
      chart?.setOption(newOptions)
    })
  },
  { deep: true }
)

// 清理函数
onUnmounted(() => {
  if (props.autoResize) {
    window.removeEventListener('resize', resizeChart)
  }
  chart?.dispose()
  chart = null
})
</script>

<style scoped>
.chart-container {
  position: relative;
}
</style>


7. 部署方案
7.1 Docker 部署架构
├── docker-compose.yml        # 主编排文件
├── frontend/                 # 前端容器配置
│   ├── Dockerfile
│   └── nginx.conf
├── backend/                  # 后端容器配置
│   ├── Dockerfile
│   └── requirements.txt
├── postgres/                 # PostgreSQL配置
│   ├── Dockerfile
│   └── init.sql
└── manticore/                # Manticore配置
    ├── Dockerfile
    └── manticore.conf

7.2 Docker Compose 配置示例
# docker-compose.yml
version: '3.8'

services:
  frontend:
    build: ./frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    build: ./backend
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - manticore
      - redis
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/honeypot
      - MANTICORE_URL=http://manticore:9308
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your_secret_key
    networks:
      - app-network

  postgres:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=honeypot
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  manticore:
    build: ./manticore
    ports:
      - "9306:9306"
      - "9308:9308"
    volumes:
      - manticore-data:/var/lib/manticore
    networks:
      - app-network

  redis:
    image: redis:6
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  manticore-data:
  redis-data:

8. 开发规范与流程
8.1 代码规范
前端：遵循 ESLint + Prettier 规范，使用 Vue 3 的 Composition API
后端：遵循 PEP 8 规范，使用类型提示增强代码可读性
数据库：统一使用蛇形命名法，表名、字段名小写
8.2 开发流程
需求分析与任务拆分
接口设计与评审
数据库设计与评审
前后端并行开发
单元测试与集成测试
代码评审
部署与验证
8.3 文档规范
API 文档：使用 FastAPI 自动生成的 Swagger 文档
代码注释：关键函数和复杂逻辑必须添加注释
技术文档：保持更新，反映最新的设计和实现
9. 测试策略
9.1 单元测试
前端：使用 Jest + Vue Test Utils 测试组件和工具函数
后端：使用 pytest 测试 API 接口和业务逻辑
9.2 集成测试
测试前后端交互流程
测试数据库操作
测试第三方服务集成
9.3 性能测试
接口响应时间测试
并发访问测试
大数据量处理测试
10. 项目计划与里程碑
需求分析与设计阶段（2 周）
完成详细需求分析
完成系统架构设计
完成数据库设计
完成 API 接口设计
基础开发阶段（3 周）
搭建前后端项目框架
实现用户认证与权限管理
完成数据库初始化与基础 CRUD 操作
核心功能开发阶段（6 周）
实现安全态势模块
实现告警中心模块
实现调查与响应模块
实现资产管理模块
功能完善阶段（4 周）
实现威胁狩猎模块
实现威胁情报模块
实现报告中心模块
实现系统管理模块
测试与优化阶段（2 周）
进行全面测试
性能优化
Bug 修复
部署与交付阶段（1 周）
容器化部署配置
用户手册编写
系统交付与培训
11. 附录
11.1 数据迁移策略
从现有 Manticore 数据库迁移数据到新系统：
编写数据迁移脚本，将 sim_service_events.sql 等数据导入 PostgreSQL
建立 Manticore 与 PostgreSQL 的数据同步机制
验证数据完整性和一致性
11.2 风险与应对措施
风险
应对措施
数据量过大导致性能问题
1. 实现数据分页2. 优化查询语句3. 考虑数据归档策略
前后端交互不一致
1. 严格遵循 API 设计规范2. 使用 TypeScript 确保类型一致3. 定期接口测试
部署环境差异
1. 完全容器化部署2. 编写详细部署文档3. 提供环境检查脚本

11.3 参考资料
Vue 3 官方文档：https://v3.vuejs.org/
FastAPI 官方文档：https://fastapi.tiangolo.com/
Element Plus 文档：https://element-plus.org/
PostgreSQL 文档：https://www.postgresql.org/docs/
Manticore 文档：https://manual.manticoresearch.com/